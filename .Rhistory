fileout.preds <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-predictions.csv')
fileout.model <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '.rds')
file.sink <- paste0('work/terminal_output/', 'FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_output-console.txt')
source('main.R')
p_load(plyr, parsnip, tidymodels, rsample, recipes, tidyverse,
ggplot2, RColorBrewer, pROC, vip, extrasteps, doParallel, themis, furrr, progressr, tictoc)
in.seq <-  'FLAIR'
in.pcas <-  as.numeric('10')
in.weights <- 'unweighted'
in.measure <-  'avg_flow_ghosting'
in.mode <-  'classification'
fileout.results <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-top.csv')
fileout.allranked <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-allranked.csv')
fileout.preds <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-predictions.csv')
fileout.model <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '.rds')
file.sink <- paste0('work/terminal_output/', 'FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_output-console.txt')
source('main.R')
in.seq <-  'FLAIR'
in.pcas <-  as.numeric('10')
in.weights <- 'unweighted'
in.measure <-  'avg_flow_ghosting'
in.mode <-  'classification'
fileout.results <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-top.csv')
fileout.allranked <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-allranked.csv')
fileout.preds <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-predictions.csv')
fileout.model <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '.rds')
file.sink <- paste0('work/terminal_output/', 'FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_output-console.txt')
source('main.R')
in.seq <-  'FLAIR'
in.pcas <-  as.numeric('10')
in.weights <- 'unweighted'
in.measure <-  'avg_flow_ghosting'
in.mode <-  'classification'
fileout.results <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-top.csv')
fileout.allranked <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-allranked.csv')
fileout.preds <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-predictions.csv')
fileout.model <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '.rds')
file.sink <- paste0('work/terminal_output/', 'FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_output-console.txt')
source('main.R')
in.seq <-  'FLAIR'
in.pcas <-  as.numeric('10')
in.weights <- 'unweighted'
in.measure <-  'avg_flow_ghosting'
in.mode <-  'classification'
fileout.results <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-top.csv')
fileout.allranked <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-allranked.csv')
fileout.preds <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-predictions.csv')
fileout.model <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '.rds')
file.sink <- paste0('work/terminal_output/', 'FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_output-console.txt')
source('main.R')
source('utils.R')
source('utils.R')
source('utils.R')
source('models.R')
gc()
start <-Sys.time()
cat('\n~~~~~~~~~~~~~~~~~~~~~~~~~\n', toupper(in.seq) , ' workflow:',
'\n\t * Rating:                 ', in.measure,
'\n\t * Mode:                   ', in.mode,
'\n\t * Weights:                ', in.weights,
'\n\t * Grid:                   ', in.grid_size,
'\n\t * Folds:                  ', in.cvfolds,
'\n\t * CV reps:                ', in.cvreps,
'\n\nRun details:',
'\n\t * Debug:                  ', debug,
'\n\t * Parallel:               ', run_paral,
'\n\t * Total scans:            ', nrow(df.seq),
'\n\t * Filtered scans:         ', nrow(df.input),
'\n\n START TIME:   ', format(start, "%X (Date: %b %d)"),
'\n\n~~~~~~~~~~~~~~~~~~~~~~~~~\n',
sep='')
tmp.run_details <- data.frame(seq = in.seq,
pccomps = in.pcas,
cv_folds = in.cvfolds,
cv_reps = in.cvreps,
grid_size_linear = grid_size_linear,
pred_grid = in.grid_size)
ind_vars <- c('bids_name', in.metrics)
args.feature_weights <- list()
#############################################
#WEIGHTING
#   * Create weighting col for ML
if(in.weights != 'unweighted'){
lst.weights <- setNames(c(df.weights[[in.weights]]), df.weights[[col.fact]])
df.input[[in.weights]] <- lst.weights[df.input[[col.fact]]]
df.input <-df.input %>%
dplyr::mutate(!!sym(in.weights) := importance_weights(!!sym(in.weights)))
ind_vars <- c(in.weights, ind_vars)
args.feature_weights = list(case_weights = in.weights)
}
#############################################
#TRAIN-TEST SPLIT
#   * main split
##############################################
#TRAIN-TEST SPLIT
set.seed(123)
splt.predictor <- initial_split(df.input, prop = in.split, strata = col.fact)
train_dat <- training(splt.predictor)
# Nested cross-validation
results <- nested_cv(train_dat, outside = vfold_cv(v = in.cvfolds, repeats = in.cvreps,
strata =col.fact),
inside = bootstraps(times = in.bootstraps))
source('nest_mix.R')
#_____________________________________________________________
df.top_models <- tmp.run_details %>% bind_cols(win_params)
df.predictor_preds <-tmp.run_details %>% bind_cols(win_preds)
write.csv(df.top_models, paste(lst_dir$results, fileout.results, sep='/'))
write.csv(df.predictor_preds, paste(lst_dir$preds, fileout.preds, sep ='/'))
end_time <-  Sys.time() - start
time_unit <- attr(end_time, "units")
cat('\n~~~~~~~~~~~~~~~~~~~~~~~~~\n', toupper(in.seq) , ' workflow completed:',
'\n\t * Rating:   ', in.measure,
'\n\t * Weights:   ', in.weights,
'\n\nStart:   ', format(start, "%X (Date: %b %d)"),
'\nEnd:   ', format(Sys.time(), "%X (Date: %b %d)"),
'\nDURATION:   ', paste(round(end_time, 2), time_unit),
'\n~~~~~~~~~~~~~~~~~~~~~~~~~\n', sep ='')
in.seq <-  'FLAIR'
in.pcas <-  as.numeric('10')
in.weights <- 'unweighted'
in.measure <-  'avg_flow_ghosting'
in.mode <-  'classification'
fileout.results <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-top.csv')
fileout.allranked <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-allranked.csv')
fileout.preds <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-predictions.csv')
fileout.model <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '.rds')
file.sink <- paste0('work/terminal_output/', 'FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_output-console.txt')
source('main.R')
in.seq <-  'FLAIR'
in.pcas <-  as.numeric('10')
in.weights <- 'unweighted'
in.measure <-  'avg_flow_ghosting'
in.mode <-  'classification'
fileout.results <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-top.csv')
fileout.allranked <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-allranked.csv')
fileout.preds <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-predictions.csv')
fileout.model <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '.rds')
file.sink <- paste0('work/terminal_output/', 'FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_output-console.txt')
source('main.R')
library(pacman)
p_load(plyr,
parsnip,
tidymodels,
rsample,
recipes,
tidyverse,
# RColorBrewer,
# pROC,
# vip,
# extrasteps,
# doParallel,
# themis,
# furrr,
progressr,
# tictoc
)
#testing?
debug <- T
run_paral = F
dir_results <- 'results/'
#CV PARAMETERS
in.split <- 0.8
in.grid_size <- 50
grid_size_linear <- 1000
in.cvfolds <- 10
in.cvreps <- 5
in.bootstraps <- 25
if (isTRUE(debug)){
in.grid_size <- 3
grid_size_linear <- 10
in.cvfolds <- 2
in.cvreps <- 1
in.bootstraps <-4
dir_results <- 'debug/results/'
}
#----------------------------------------------------
#M3 PARAMETERS
if (isTRUE(run_paral)){
handlers("progress")
cores_m3 <- ifelse(isTRUE(debug), detectCores()-1, as.numeric(Sys.getenv("SLURM_CPUS_PER_TASK", unset = 1)[1])-1)
cat('\n\t *  M3 Cores:', cores_m3, sep='')
plan(multisession, workers = cores_m3 )# plan(multicore) for Unix-based systems
}
#----------------------------------------------------
#SINK FILE
#sink(file.sink, split=TRUE)
#----------------------------------------------------
#DF DETAILS
cols.ids <- c("aep_id", "modality", "avg_motion", "avg_quality", "avg_flow_ghosting", "avg_susceptibility", "bids_name")
lst.mode_keys <- c('cls' ='classification', 'reg'='regression')
#----------------------------------------------------
#IN DATA
lst_dir <- list(models =paste0(dir_results, '/models'),
results =paste0(dir_results, '/top'),
preds = paste0(dir_results, '/predictions'))
dir.local_data <- '/home/unimelb.edu.au/mollyi/Projects/repos/RADIOL_qa/code/classifier_work/data/'
df.iqms <- read.csv(paste0(dir.local_data, 'merge_qaqc/radiolqa_classifier_ratings-all_desc-clean.csv'))
exclude <- c("X", "size_x", "size_y", "size_z", "spacing_x", "spacing_y", "spacing_z", "summary_bg_p05")
df.iqms <- df.iqms[!(names(df.iqms) %in% exclude)]
#-----------------------------------------------
#Define dataframe parameters
#   * column names & keys
id.ratings <- ifelse(in.measure == 'avg_quality', 'quality', 'artifact')
col.fact <- paste0('factor_', sub('avg_','', in.measure))
col.rnd <- paste0('rnd_', sub('avg_','', in.measure))
#   * column names
df.seq <- df.iqms[df.iqms$modality == in.seq & !is.na(df.iqms[[in.measure]]), ]
#----------------------------------------------------
#DF VARIABLES
cols.ratings<- c(names(df.iqms)[grep('avg_', names(df.iqms))],
names(df.iqms)[grep('rnd_', names(df.iqms))],
names(df.iqms)[grep('factor_', names(df.iqms))])
in.metrics <- names(df.iqms)[!(names(df.iqms) %in% c(cols.ids, cols.ratings, exclude))]
#----------------------------------------------------
#FILTER INPUT DATAFRAME
df.input <- df.seq
if(in.measure !='avg_quality'){
df.input <- df.input[df.input[[in.measure]] <=4, ]
}
#----------------------------------------------------
#FACTORING
lst.labels <- list()
lst.labels[['artifact']] <- c('bad' =1, 'mild'=2, 'ok'=3, 'good'=4, 'outside'=5)
lst.labels[['quality']] <- c('bad' =1, 'mild'=2, 'ok'=3, 'good'=4, 'great' =5)
class.qual <- names(lst.labels[['quality']])
class.art <- names(lst.labels[['artifact']])
df.input <- df.input %>%
dplyr::mutate(
across(
.cols = c(factor_flow_ghosting, factor_susceptibility, factor_motion),
.fns = ~ factor(.x, levels = class.art[class.art %in% unique(.x)])
)
)
df.input$factor_quality <- factor(
df.input$factor_quality,
levels = unique(df.input$factor_quality)[order(match(unique(df.input$factor_quality), class.qual))])
#----------------------------------------------------
#WEIGHTING DATAFRAME
df.weights <- df.input %>%
group_by(!!sym(col.fact)) %>%
dplyr::summarise(count = n(), proportion = n() / nrow(df.input)) %>%
dplyr::mutate(w_inverse = 1 / proportion,
w_invsqr =w_inverse^2
)
in.seq <-  'FLAIR'
in.pcas <-  as.numeric('10')
in.weights <- 'unweighted'
in.measure <-  'avg_flow_ghosting'
in.mode <-  'classification'
fileout.results <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-top.csv')
fileout.allranked <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-allranked.csv')
fileout.preds <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-predictions.csv')
fileout.model <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '.rds')
file.sink <- paste0('work/terminal_output/', 'FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_output-console.txt')
source('main.R')
library(pacman)
p_load(plyr,
parsnip,
tidymodels,
rsample,
recipes,
tidyverse,
# RColorBrewer,
# pROC,
# vip,
# extrasteps,
# doParallel,
# themis,
furrr,
progressr,
# tictoc
)
#testing?
debug <- T
run_paral = F
dir_results <- 'results/'
#CV PARAMETERS
in.split <- 0.8
in.grid_size <- 50
grid_size_linear <- 1000
in.cvfolds <- 10
in.cvreps <- 5
in.bootstraps <- 25
if (isTRUE(debug)){
in.grid_size <- 3
grid_size_linear <- 10
in.cvfolds <- 2
in.cvreps <- 1
in.bootstraps <-4
dir_results <- 'debug/results/'
}
#----------------------------------------------------
#M3 PARAMETERS
if (isTRUE(run_paral)){
handlers("progress")
cores_m3 <- ifelse(isTRUE(debug), detectCores()-1, as.numeric(Sys.getenv("SLURM_CPUS_PER_TASK", unset = 1)[1])-1)
cat('\n\t *  M3 Cores:', cores_m3, sep='')
plan(multisession, workers = cores_m3 )# plan(multicore) for Unix-based systems
}
#----------------------------------------------------
#SINK FILE
#sink(file.sink, split=TRUE)
#----------------------------------------------------
#DF DETAILS
cols.ids <- c("aep_id", "modality", "avg_motion", "avg_quality", "avg_flow_ghosting", "avg_susceptibility", "bids_name")
lst.mode_keys <- c('cls' ='classification', 'reg'='regression')
#----------------------------------------------------
#IN DATA
lst_dir <- list(models =paste0(dir_results, '/models'),
results =paste0(dir_results, '/top'),
preds = paste0(dir_results, '/predictions'))
dir.local_data <- '/home/unimelb.edu.au/mollyi/Projects/repos/RADIOL_qa/code/classifier_work/data/'
df.iqms <- read.csv(paste0(dir.local_data, 'merge_qaqc/radiolqa_classifier_ratings-all_desc-clean.csv'))
exclude <- c("X", "size_x", "size_y", "size_z", "spacing_x", "spacing_y", "spacing_z", "summary_bg_p05")
df.iqms <- df.iqms[!(names(df.iqms) %in% exclude)]
#-----------------------------------------------
#Define dataframe parameters
#   * column names & keys
id.ratings <- ifelse(in.measure == 'avg_quality', 'quality', 'artifact')
col.fact <- paste0('factor_', sub('avg_','', in.measure))
col.rnd <- paste0('rnd_', sub('avg_','', in.measure))
#   * column names
df.seq <- df.iqms[df.iqms$modality == in.seq & !is.na(df.iqms[[in.measure]]), ]
#----------------------------------------------------
#DF VARIABLES
cols.ratings<- c(names(df.iqms)[grep('avg_', names(df.iqms))],
names(df.iqms)[grep('rnd_', names(df.iqms))],
names(df.iqms)[grep('factor_', names(df.iqms))])
in.metrics <- names(df.iqms)[!(names(df.iqms) %in% c(cols.ids, cols.ratings, exclude))]
#----------------------------------------------------
#FILTER INPUT DATAFRAME
df.input <- df.seq
if(in.measure !='avg_quality'){
df.input <- df.input[df.input[[in.measure]] <=4, ]
}
#----------------------------------------------------
#FACTORING
lst.labels <- list()
lst.labels[['artifact']] <- c('bad' =1, 'mild'=2, 'ok'=3, 'good'=4, 'outside'=5)
lst.labels[['quality']] <- c('bad' =1, 'mild'=2, 'ok'=3, 'good'=4, 'great' =5)
class.qual <- names(lst.labels[['quality']])
class.art <- names(lst.labels[['artifact']])
df.input <- df.input %>%
dplyr::mutate(
across(
.cols = c(factor_flow_ghosting, factor_susceptibility, factor_motion),
.fns = ~ factor(.x, levels = class.art[class.art %in% unique(.x)])
)
)
df.input$factor_quality <- factor(
df.input$factor_quality,
levels = unique(df.input$factor_quality)[order(match(unique(df.input$factor_quality), class.qual))])
#----------------------------------------------------
#WEIGHTING DATAFRAME
df.weights <- df.input %>%
group_by(!!sym(col.fact)) %>%
dplyr::summarise(count = n(), proportion = n() / nrow(df.input)) %>%
dplyr::mutate(w_inverse = 1 / proportion,
w_invsqr =w_inverse^2
)
in.seq <-  'FLAIR'
in.pcas <-  as.numeric('10')
in.weights <- 'unweighted'
in.measure <-  'avg_flow_ghosting'
in.mode <-  'classification'
fileout.results <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-top.csv')
fileout.allranked <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-allranked.csv')
fileout.preds <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-predictions.csv')
fileout.model <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '.rds')
file.sink <- paste0('work/terminal_output/', 'FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_output-console.txt')
source('main.R')
library(pacman)
p_load(plyr,
parsnip,
tidymodels,
rsample,
recipes,
tidyverse,
# RColorBrewer,
# pROC,
# vip,
# extrasteps,
# doParallel,
# themis,
furrr,
progressr,
tictoc
)
#testing?
debug <- T
run_paral = F
dir_results <- 'results/'
#CV PARAMETERS
in.split <- 0.8
in.grid_size <- 50
grid_size_linear <- 1000
in.cvfolds <- 10
in.cvreps <- 5
in.bootstraps <- 25
if (isTRUE(debug)){
in.grid_size <- 3
grid_size_linear <- 10
in.cvfolds <- 2
in.cvreps <- 1
in.bootstraps <-4
dir_results <- 'debug/results/'
}
#----------------------------------------------------
#M3 PARAMETERS
if (isTRUE(run_paral)){
handlers("progress")
cores_m3 <- ifelse(isTRUE(debug), detectCores()-1, as.numeric(Sys.getenv("SLURM_CPUS_PER_TASK", unset = 1)[1])-1)
cat('\n\t *  M3 Cores:', cores_m3, sep='')
plan(multisession, workers = cores_m3 )# plan(multicore) for Unix-based systems
}
#----------------------------------------------------
#SINK FILE
#sink(file.sink, split=TRUE)
#----------------------------------------------------
#DF DETAILS
cols.ids <- c("aep_id", "modality", "avg_motion", "avg_quality", "avg_flow_ghosting", "avg_susceptibility", "bids_name")
lst.mode_keys <- c('cls' ='classification', 'reg'='regression')
#----------------------------------------------------
#IN DATA
lst_dir <- list(models =paste0(dir_results, '/models'),
results =paste0(dir_results, '/top'),
preds = paste0(dir_results, '/predictions'))
dir.local_data <- '/home/unimelb.edu.au/mollyi/Projects/repos/RADIOL_qa/code/classifier_work/data/'
df.iqms <- read.csv(paste0(dir.local_data, 'merge_qaqc/radiolqa_classifier_ratings-all_desc-clean.csv'))
exclude <- c("X", "size_x", "size_y", "size_z", "spacing_x", "spacing_y", "spacing_z", "summary_bg_p05")
df.iqms <- df.iqms[!(names(df.iqms) %in% exclude)]
#-----------------------------------------------
#Define dataframe parameters
#   * column names & keys
id.ratings <- ifelse(in.measure == 'avg_quality', 'quality', 'artifact')
col.fact <- paste0('factor_', sub('avg_','', in.measure))
col.rnd <- paste0('rnd_', sub('avg_','', in.measure))
#   * column names
df.seq <- df.iqms[df.iqms$modality == in.seq & !is.na(df.iqms[[in.measure]]), ]
#----------------------------------------------------
#DF VARIABLES
cols.ratings<- c(names(df.iqms)[grep('avg_', names(df.iqms))],
names(df.iqms)[grep('rnd_', names(df.iqms))],
names(df.iqms)[grep('factor_', names(df.iqms))])
in.metrics <- names(df.iqms)[!(names(df.iqms) %in% c(cols.ids, cols.ratings, exclude))]
#----------------------------------------------------
#FILTER INPUT DATAFRAME
df.input <- df.seq
if(in.measure !='avg_quality'){
df.input <- df.input[df.input[[in.measure]] <=4, ]
}
#----------------------------------------------------
#FACTORING
lst.labels <- list()
lst.labels[['artifact']] <- c('bad' =1, 'mild'=2, 'ok'=3, 'good'=4, 'outside'=5)
lst.labels[['quality']] <- c('bad' =1, 'mild'=2, 'ok'=3, 'good'=4, 'great' =5)
class.qual <- names(lst.labels[['quality']])
class.art <- names(lst.labels[['artifact']])
df.input <- df.input %>%
dplyr::mutate(
across(
.cols = c(factor_flow_ghosting, factor_susceptibility, factor_motion),
.fns = ~ factor(.x, levels = class.art[class.art %in% unique(.x)])
)
)
df.input$factor_quality <- factor(
df.input$factor_quality,
levels = unique(df.input$factor_quality)[order(match(unique(df.input$factor_quality), class.qual))])
#----------------------------------------------------
#WEIGHTING DATAFRAME
df.weights <- df.input %>%
group_by(!!sym(col.fact)) %>%
dplyr::summarise(count = n(), proportion = n() / nrow(df.input)) %>%
dplyr::mutate(w_inverse = 1 / proportion,
w_invsqr =w_inverse^2
)
in.seq <-  'FLAIR'
in.pcas <-  as.numeric('10')
in.weights <- 'unweighted'
in.measure <-  'avg_flow_ghosting'
in.mode <-  'classification'
fileout.results <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-top.csv')
fileout.allranked <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-allranked.csv')
fileout.preds <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-predictions.csv')
fileout.model <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '.rds')
file.sink <- paste0('work/terminal_output/', 'FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_output-console.txt')
source('main.R')
in.seq <-  'FLAIR'
in.pcas <-  as.numeric('10')
in.weights <- 'unweighted'
in.measure <-  'avg_flow_ghosting'
in.mode <-  'classification'
fileout.results <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-top.csv')
fileout.allranked <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-allranked.csv')
fileout.preds <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_results-predictions.csv')
fileout.model <- paste0('FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '.rds')
file.sink <- paste0('work/terminal_output/', 'FLAIR_pccomps-10_weights-unweighted_type-avg_flow_ghosting_mode-classification', '_output-console.txt')
source('main.R')
citation('furrr')
citation(progressr)
citation(progressr)
p_load(plyr, parsnip, tidymodels, rsample, recipes,
tidyverse, furrr, progressr, tictoc)
citation(progressr)
citation(progressr)
citation(future)
citation(tictoc)
as.numeric(Sys.getenv("SLURM_CPUS_PER_TASK", unset = 1)
[1])
as.numeric(Sys.getenv("SLURM_CPUS_PER_TASK", unset = 1))
as.numeric(Sys.getenv("SLURM_CPUS_PER_TASK", unset = 1)[1])
detectCores()-1
